[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\Pedro\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\Pedro\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.8.2 (Oracle Corporation Java 11.0.17)
[debug]       Load.loadUnit: plugins took 540.328ms
[debug]       Load.loadUnit: defsScala took 1.4026ms
[debug] [Loading] Scanning directory C:\Users\Pedro\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\Pedro\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 177.354 ms
[debug]           Load.resolveProject(global-plugins) took 191.356ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\Pedro\.sbt\1.0\plugins, plugins: List(<none>))) took 520.4427ms
[debug] [Loading] Done in C:\Users\Pedro\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 600.3588ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.7856ms
[debug]     Load.loadUnit(file:/C:/Users/Pedro/.sbt/1.0/plugins/, ...) took 1179.7226ms
[debug]   Load.apply: load took 1984.8073ms
[debug]   Load.apply: resolveProjects took 54.5932ms
[debug]   Load.apply: finalTransforms took 416.5447ms
[debug]   Load.apply: config.delegates took 54.2922ms
[debug]   Load.apply: Def.make(settings)... took 2277.8579ms
[debug]   Load.apply: structureIndex took 414.4001ms
[debug]   Load.apply: mkStreams took 6.533ms
[info] loading global plugins from C:\Users\Pedro\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 10082.0194ms
[debug]           Load.loadUnit: plugins took 88.7306ms
[debug]           Load.loadUnit: defsScala took 0.0113ms
[debug] [Loading] Scanning directory C:\Users\Pedro\Desktop\WorkSpace\Python\Scala\scala-postgresql\project
[debug]             Load.loadUnit: mkEval took 36.2924ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\Pedro\Desktop\WorkSpace\Python\Scala\scala-postgresql\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 6.8427 ms
[info] loading settings for project scala-postgresql-build from idea.sbt ...
[debug]               Load.resolveProject(scala-postgresql-build) took 36.1842ms
[debug]             Load.loadTransitive: finalizeProject(Project(id scala-postgresql-build, base: C:\Users\Pedro\Desktop\WorkSpace\Python\Scala\scala-postgresql\project, plugins: List(<none>))) took 47.2851ms
[debug] [Loading] Done in C:\Users\Pedro\Desktop\WorkSpace\Python\Scala\scala-postgresql\project, returning: (scala-postgresql-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 11448.0006ms
[debug]           Load.loadUnit: cleanEvalClasses took 22.7268ms
[debug]         Load.loadUnit(file:/C:/Users/Pedro/Desktop/WorkSpace/Python/Scala/scala-postgresql/project/, ...) took 11567.7306ms
[debug]       Load.apply: load took 11575.4879ms
[debug]       Load.apply: resolveProjects took 0.4905ms
[debug]       Load.apply: finalTransforms took 45.6475ms
[debug]       Load.apply: config.delegates took 2.7927ms
[debug]       Load.apply: Def.make(settings)... took 364.2376ms
[debug]       Load.apply: structureIndex took 116.873ms
[debug]       Load.apply: mkStreams took 0.0052ms
[info] loading project definition from C:\Users\Pedro\Desktop\WorkSpace\Python\Scala\scala-postgresql\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[debug]     Load.loadUnit: plugins took 19829.3283ms
[debug]     Load.loadUnit: defsScala took 0.0058ms
[debug] [Loading] Scanning directory C:\Users\Pedro\Desktop\WorkSpace\Python\Scala\scala-postgresql
[debug]       Load.loadUnit: mkEval took 0.3301ms
[debug] [Loading] Found root project root w/ remaining 
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 16.2247 ms
[info] loading settings for project root from build.sbt ...
[debug]         Load.resolveProject(root) took 160.08ms
[debug]       Load.loadTransitive: finalizeProject(Project(id root, base: C:\Users\Pedro\Desktop\WorkSpace\Python\Scala\scala-postgresql, plugins: List(<none>))) took 184.478ms
[debug] [Loading] Done in C:\Users\Pedro\Desktop\WorkSpace\Python\Scala\scala-postgresql, returning: (root)
[debug]     Load.loadUnit: loadedProjectsRaw took 11225.0641ms
[debug]     Load.loadUnit: cleanEvalClasses took 39.3682ms
[debug]   Load.loadUnit(file:/C:/Users/Pedro/Desktop/WorkSpace/Python/Scala/scala-postgresql/, ...) took 31095.0098ms
[debug] Load.apply: load took 31101.2638ms
[debug] Load.apply: resolveProjects took 0.3981ms
[debug] Load.apply: finalTransforms took 124.1517ms
[debug] Load.apply: config.delegates took 0.9721ms
[debug] Load.apply: Def.make(settings)... took 423.5088ms
[debug] Load.apply: structureIndex took 126.2252ms
[debug] Load.apply: mkStreams took 0.0055ms
[info] set current project to scala-postgresql (in build file:/C:/Users/Pedro/Desktop/WorkSpace/Python/Scala/scala-postgresql/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 50181 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 50181, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to scala-postgresql (in build file:/C:/Users/Pedro/Desktop/WorkSpace/Python/Scala/scala-postgresql/)
[debug] > Exec(idea-shell, None, None)
